#!/usr/bin/env python
# -*- coding: utf-8 -*-
# this file was automatically generated by ExpEYES-Blocks
# generation date: 2017-04-20T11:17:29.908018

from PyQt4.QtGui import QApplication, QWidget
from PyQt4.QtCore import QTimer, SIGNAL, SLOT

from common import 	MainWindow
	
import expeyes.eyesj as eyes
import numpy as np

### Parameters generated by ExpEYES-Blocks ###
TITLE="Experiment"
CHANINPUTS=[1,2,3,5] # A1, A2, IN1, SEN
### Examples: ################################
# CHANINPUTS=[1,2,3,5] # A1, A2, IN1, SEN    #
# CHANINPUTS=[1,0,0,5] # A1, None, None, SEN #
##############################################
NP=201
TG=50
#### Number of points NP, time gap TG ########
# for example: NP=201; TG=50                 #
# 201 points* 50 Âµs => duration = 1 ms       #
##############################################

class Interface(QWidget):
	"""
	this class features an interface to expeyes-junior
	
	:param parent: the main window
	:type parent: MainWindow
	"""
	def __init__(self, parent):
		QWidget.__init__(self, parent)
		self.I=eyes.open()
		if not self.I:
			title=self.tr("[%1] - Expeyes-Junior not found: check connections").arg(TITLE)
		else:
			title=self.tr("[%1] - Expeyes-Junior found at %2").arg(TITLE).arg(self.I.device)
		self.retitle(title)
		self.plotItem=self.parent().graphicsView.plotItem
		self.plotItem.enableAutoRange(x=True, y=False)
		self.plotItem.setYRange(-5,5, padding=0.05)
		self.plots=[]
		colors=["g","r","b","m"]
		for i in range(4):
			self.plots.append(self.plotItem.plot(x=[], y=[]))
			self.plots[i].setPen(colors[i], width=2)
		if self.I:
			self.capturefuncs=[
				self.I.capture,
				self.I.capture2,
				self.I.capture3,
				self.I.capture4]
			self.timer=QTimer(self)
			self.timer.timeout.connect(self.refresh)
			self.timer.start(500);
		return
		
	def erasePlots(self):
		for p in self.plots:
			p.setData(x=[],y=[])
		return
		
		
	def refresh(self):
		self.erasePlots()
		usedChans=[i for i in CHANINPUTS if i>0]
		t=4*[[]]; v=4*[[]]
		args=[]
		for i in range(len(usedChans)):
			args.append(usedChans[i])
		args.append(NP); args.append(TG)
		capt = self.capturefuncs[len(usedChans)-1](*args)
		for i in range(len(usedChans)):
			t[i], v[i] = capt[2*i], capt[2*i+1]
		j=0
		for i in range(4):
			if CHANINPUTS[i]!=0:
				self.plots[i].setData(x=np.array(t[j])*1e-3, y=v[j])
				j+=1
		return
		
	def retitle(self, title):
		"""
		set the main window's title
		
		:param title: new title for the main window
		:type title: QString
		"""
		self.parent().setWindowTitle(title)
		return
		
	def message(self, msg, msec=0):
		"""
		displays a message in the status bar
		
		:param msg: the massage to display
		:type msg: QString
		:param msec: milliseconds to display the message; defaults to 0, which means endlessly
		:type msec: int
		"""
		self.parent().statusBar().showMessage(msg, msec)
		return
		
		
	

if __name__=="__main__":
	import sys

	app = QApplication(sys.argv)
	window = MainWindow()
	I=Interface(window)
	window.show()
	sys.exit(app.exec_())
